// Copyright 2023-2025, [rust@localhost] $ (@github-handle)
// //
// // This file is part of LightScheduling.
// //
// // LightScheduling is free software: you can redistribute it and/or modify it under
// // the terms of the GNU General Public License as published by the Free
// // Software Foundation, either version 3 of the License, or (at your option)
// // any later version.
// //
// // LightScheduling is distributed in the hope that it will be useful, but WITHOUT ANY
// // WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// // FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// // details.
// //
// // You should have received a copy of the GNU General Public License along
// // with LightScheduling. If not, see <https://www.gnu.org/licenses/>.

use std::process::{Command, Stdio};

use log::error;

use super::Looper;

pub trait TopappDetector {
    /// 获取当前顶层应用的包名（返回空字符串表示失败）
    fn get_current_topapp(&self) -> String;
}

impl TopappDetector for Looper {
    fn get_current_topapp(&self) -> String {
        let output = match Command::new("sh")
            .arg("-c")
            .arg("dumpsys activity activities | grep mCurrentFocus")
            .stdout(Stdio::piped())
            .output()
        {
            Ok(o) => o,
            Err(e) => {
                error!("执行dumpsys命令失败: {}", e);
                return String::new();
            }
        };
        let stdout = String::from_utf8_lossy(&output.stdout);
        parse_topapp_from_dumpsys(&stdout)
    }
}

fn parse_topapp_from_dumpsys(output: &str) -> String {
    output
        .lines() // 处理多行结果
        .find(|line| line.contains("mCurrentFocus")) // 定位关键行
        .and_then(|line| {
            line.split_whitespace()
                .find(|s| s.contains('/')) // 查找包含 '/' 的字段（如 com.example.pkg/...）
                .map(|s| s.split('/').next().unwrap_or("").to_string())
        })
        .unwrap_or_default()
}
